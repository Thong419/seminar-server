import forge from "node-forge";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";
import dotenv from "dotenv";

// ƒê∆∞·ªùng d·∫´n ƒë·ªÉ t√¨m file .env
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: path.join(__dirname, "..", "config.env") });

const secretsDir = path.join(__dirname, "..", "secrets/ca");

console.log("üîç ƒêang ki·ªÉm tra th∆∞ m·ª•c secrets:", secretsDir);

if (fs.existsSync(path.join(secretsDir, "ca.crt"))) {
  console.log("‚ö†Ô∏è CA certificate ƒë√£ t·ªìn t·∫°i. Kh√¥ng t·∫°o l·∫°i.");
  process.exit(0);
}

// ƒê·ªçc m·∫≠t kh·∫©u t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const password = process.env.CA_KEY_PASSWORD;
if (!password) {
  console.error("‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng CA_KEY_PASSWORD trong config.env");
  process.exit(1);
}

// T·∫°o key pair
const keys = forge.pki.rsa.generateKeyPair(2048);

// T·∫°o CA certificate
const cert = forge.pki.createCertificate();
cert.publicKey = keys.publicKey;
cert.serialNumber = "01";
cert.validity.notBefore = new Date();
cert.validity.notAfter = new Date();
cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10);

const attrs = [
  { name: "commonName", value: "CertifyPro" },
  { name: "countryName", value: "VN" },
  { name: "organizationName", value: "CertifyPro Org" },
  { name: "organizationalUnitName", value: "CertifyPro Unit" },
];

cert.setSubject(attrs);
cert.setIssuer(attrs);
// cert.setExtensions([
//   { name: "basicConstraints", cA: true },
//   {
//     name: "keyUsage",
//     keyCertSign: true,
//     digitalSignature: true,
//     cRLSign: true,
//   },
//   { name: "subjectKeyIdentifier" },
// ]);

cert.setExtensions([
  { name: "basicConstraints", cA: true },
  {
    name: "keyUsage",
    keyCertSign: true,
    digitalSignature: true,
    cRLSign: true,
  },
  { name: "subjectKeyIdentifier" },
  {
    name: "extKeyUsage",
    serverAuth: true,
  },
  {
    name: "subjectAltName",
    altNames: [
      {
        type: 2, // DNS
        value: "localhost",
      },
    ],
  },
]);

// cert.sign(keys.privateKey);

const md = forge.md.sha256.create();
cert.sign(keys.privateKey, md);

// Chuy·ªÉn sang PEM
const certPem = forge.pki.certificateToPem(cert);

// üîê M√£ h√≥a kh√≥a ri√™ng b·∫±ng m·∫≠t kh·∫©u t·ª´ .env
const keyPemEncrypted = forge.pki.encryptRsaPrivateKey(
  keys.privateKey,
  password,
  {
    algorithm: "aes256",
  }
);

// L∆∞u file
fs.mkdirSync(secretsDir, { recursive: true });
fs.writeFileSync(path.join(secretsDir, "ca.crt"), certPem);

// L∆∞u kh√≥a ri√™ng ƒë√£ m√£ h√≥a v√†o secrets/ca.key
fs.writeFileSync(path.join(secretsDir, "caEncrypted.key"), keyPemEncrypted);
fs.writeFileSync(
  path.join(secretsDir, "ca.key"),
  forge.pki.privateKeyToPem(keys.privateKey)
);

console.log("‚úÖ ƒê√£ t·∫°o file CA t·∫°i:", secretsDir);
console.log("üîí ca.key ƒë√£ ƒë∆∞·ª£c m√£ h√≥a b·∫±ng m·∫≠t kh·∫©u.");
